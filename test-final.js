#!/usr/bin/env node

/**
 * EQWIP Final Test Suite
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
 */

const fs = require('fs');

// –¶–≤–µ—Ç–∞
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function finalTest() {
  log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ EQWIP', 'magenta');
  log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...', 'cyan');
  log('=' * 50, 'blue');
  
  let passed = 0;
  let failed = 0;
  let warnings = 0;
  
  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const pages = [
    'src/app/page.tsx',
    'src/app/jobs/page.tsx',
    'src/app/auth/signin/page.tsx',
    'src/app/auth/signup/page.tsx',
    'src/app/dashboard/page.tsx',
    'src/app/employer/page.tsx',
    'src/app/admin/page.tsx',
    'src/app/profile/page.tsx',
    'src/app/resumes/page.tsx',
    'src/app/companies/page.tsx',
    'src/app/candidates/page.tsx',
    'src/app/notifications/page.tsx',
    'src/app/favorites/page.tsx',
    'src/app/otkliki/page.tsx',
    'src/app/applications/page.tsx',
    'src/app/chat/page.tsx',
    'src/app/analytics/page.tsx',
    'src/app/career-map/page.tsx',
    'src/app/ai-features/page.tsx',
    'src/app/ai-recommendations/page.tsx',
    'src/app/pricing/page.tsx',
    'src/app/contacts/page.tsx',
    'src/app/help/page.tsx',
    'src/app/settings/page.tsx',
    'src/app/status/page.tsx',
    'src/app/offline/page.tsx',
    'src/app/university/page.tsx',
    'src/app/post-job/page.tsx',
    'src/app/internships/create/page.tsx',
    'src/app/privacy/page.tsx',
    'src/app/terms/page.tsx',
    'src/app/cookies/page.tsx'
  ];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  log('\nüìÑ –ü–†–û–í–ï–†–ö–ê –°–¢–†–ê–ù–ò–¶:', 'cyan');
  
  pages.forEach(page => {
    if (fs.existsSync(page)) {
      log(`  ‚úÖ ${page}`, 'green');
      passed++;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const content = fs.readFileSync(page, 'utf8');
      
      // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã
      const hasButtons = content.includes('Button') || content.includes('button') || content.includes('onClick');
      const hasForms = content.includes('form') || content.includes('Form') || content.includes('onSubmit');
      const hasInputs = content.includes('input') || content.includes('Input') || content.includes('type=');
      const hasLinks = content.includes('href') || content.includes('Link') || content.includes('link');
      
      if (hasButtons) {
        log(`    ‚úÖ –ö–Ω–æ–ø–∫–∏ –Ω–∞–π–¥–µ–Ω—ã`, 'green');
        passed++;
      } else {
        log(`    ‚ö†Ô∏è  –ö–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`, 'yellow');
        warnings++;
      }
      
      if (hasForms || hasInputs) {
        log(`    ‚úÖ –§–æ—Ä–º—ã/–ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã`, 'green');
        passed++;
      } else {
        log(`    ‚ö†Ô∏è  –§–æ—Ä–º—ã/–ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`, 'yellow');
        warnings++;
      }
      
      if (hasLinks) {
        log(`    ‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞–π–¥–µ–Ω—ã`, 'green');
        passed++;
      } else {
        log(`    ‚ö†Ô∏è  –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`, 'yellow');
        warnings++;
      }
      
    } else {
      log(`  ‚ùå ${page}`, 'red');
      failed++;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  log('\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –°–¢–†–ê–ù–ò–¶–´:', 'cyan');
  
  const missingPages = [
    'src/app/internships/page.tsx'
  ];
  
  missingPages.forEach(page => {
    if (!fs.existsSync(page)) {
      log(`  ‚ùå ${page}`, 'red');
      failed++;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
  log('\nüåê –ü–†–û–í–ï–†–ö–ê API:', 'cyan');
  
  const apiEndpoints = [
    'src/app/api/auth/[...nextauth]/route.ts',
    'src/app/api/jobs/route.ts',
    'src/app/api/companies/route.ts',
    'src/app/api/candidates/route.ts',
    'src/app/api/admin/route.ts'
  ];
  
  apiEndpoints.forEach(endpoint => {
    if (fs.existsSync(endpoint)) {
      log(`  ‚úÖ ${endpoint}`, 'green');
      passed++;
    } else {
      log(`  ‚ùå ${endpoint}`, 'red');
      failed++;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  log('\nüß© –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:', 'cyan');
  
  const components = [
    'src/components/Header.tsx',
    'src/components/Footer.tsx',
    'src/components/ui/button.tsx',
    'src/components/ui/input.tsx',
    'src/components/ui/card.tsx'
  ];
  
  components.forEach(component => {
    if (fs.existsSync(component)) {
      log(`  ‚úÖ ${component}`, 'green');
      passed++;
    } else {
      log(`  ‚ùå ${component}`, 'red');
      failed++;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
  log('\nüèóÔ∏è –ü–†–û–í–ï–†–ö–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´:', 'cyan');
  
  const architecture = [
    'src/lib/core/BaseService.ts',
    'src/lib/core/BaseRepository.ts',
    'src/lib/core/BaseController.ts',
    'src/lib/repositories/JobRepository.ts',
    'src/lib/services/JobService.ts',
    'src/lib/controllers/JobController.ts'
  ];
  
  architecture.forEach(file => {
    if (fs.existsSync(file)) {
      log(`  ‚úÖ ${file}`, 'green');
      passed++;
    } else {
      log(`  ‚ùå ${file}`, 'red');
      failed++;
    }
  });
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\n' + '=' * 50, 'blue');
  log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢', 'blue');
  log('=' * 50, 'blue');
  
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`, 'red');
  log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings}`, 'yellow');
  
  const total = passed + failed + warnings;
  const successRate = ((passed / total) * 100).toFixed(1);
  
  log(`\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, successRate > 80 ? 'green' : 'yellow');
  
  if (failed === 0) {
    log('\nüéâ –í–°–ï –ö–ù–û–ü–ö–ò –ò –°–¢–†–ê–ù–ò–¶–´ –†–ê–ë–û–¢–ê–Æ–¢!', 'green');
    log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞', 'green');
    log('‚úÖ –í—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ', 'green');
    log('‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'green');
    
    if (warnings > 0) {
      log('\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'yellow');
    }
  } else {
    log('\n‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!', 'red');
    log('‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'yellow');
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:', 'cyan');
  log('  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run dev –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'yellow');
  log('  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ', 'yellow');
  log('  ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ —Ñ–æ—Ä–º—ã', 'yellow');
  log('  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏', 'yellow');
  log('  ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç', 'yellow');
  
  return failed === 0;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  finalTest();
}

module.exports = { finalTest };
