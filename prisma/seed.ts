import { PrismaClient, UserRole, ApplicationStatus, NotificationType, SubscriptionPlan } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Seeding database...')

  // Check if data already exists
  const existingUsers = await prisma.user.count()
  if (existingUsers > 0) {
    console.log('‚úÖ Database already seeded!')
    return
  }

  // Create admin user
  const adminPassword = await bcrypt.hash('123456', 10)
  const admin = await prisma.user.create({
    data: {
      email: 'admin@eqwip.com',
      password: adminPassword,
      role: UserRole.ADMIN,
      emailVerified: true,
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä EQWIP'
    }
  })

  // Create employer users
  const employerPassword = await bcrypt.hash('123456', 10)
  const employer1 = await prisma.user.create({
    data: {
      email: 'employer1@eqwip.com',
      password: employerPassword,
      role: UserRole.EMPLOYER,
      emailVerified: true,
      name: 'TechCorp HR'
    }
  })

  const employer2 = await prisma.user.create({
    data: {
      email: 'employer2@eqwip.com',
      password: employerPassword,
      role: UserRole.EMPLOYER,
      emailVerified: true,
      name: 'DataTech HR'
    }
  })

  // Create candidate users
  const candidatePassword = await bcrypt.hash('123456', 10)
  const candidate1 = await prisma.user.create({
    data: {
      email: 'candidate1@eqwip.com',
      password: candidatePassword,
      role: UserRole.CANDIDATE,
      emailVerified: true,
      name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤'
    }
  })

  const candidate2 = await prisma.user.create({
    data: {
      email: 'candidate2@eqwip.com',
      password: candidatePassword,
      role: UserRole.CANDIDATE,
      emailVerified: true,
      name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞'
    }
  })

  const testUser = await prisma.user.create({
    data: {
      email: 'test@eqwip.com',
      password: candidatePassword,
      role: UserRole.CANDIDATE,
      emailVerified: true,
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    }
  })

  // Create university users
  console.log('üéì Creating universities...')
  
  const universities = [
    {
      name: '–ú–ì–£ –∏–º. –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞',
      email: 'university1@eqwip.com',
      description: '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–º–µ–Ω–∏ –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞ - –≤–µ–¥—É—â–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –†–æ—Å—Å–∏–∏',
      website: 'https://www.msu.ru',
      location: '–ú–æ—Å–∫–≤–∞',
      establishedYear: 1755,
      studentCount: 50000,
      specialties: ['–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞', '–≠–∫–æ–Ω–æ–º–∏–∫–∞']
    },
    {
      name: '–°–ü–±–ì–£',
      email: 'university2@eqwip.com',
      description: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç - –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞—Ä–µ–π—à–∏—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ –†–æ—Å—Å–∏–∏',
      website: 'https://spbu.ru',
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      establishedYear: 1724,
      studentCount: 30000,
      specialties: ['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞', '–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞']
    },
    {
      name: '–ú–§–¢–ò',
      email: 'university3@eqwip.com',
      description: '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Ñ–∏–∑–∏–∫–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç - –≤–µ–¥—É—â–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
      website: 'https://mipt.ru',
      location: '–ú–æ—Å–∫–≤–∞',
      establishedYear: 1951,
      studentCount: 8000,
      specialties: ['–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–ë–∏–æ—Ñ–∏–∑–∏–∫–∞']
    },
    {
      name: '–ò–¢–ú–û',
      email: 'university4@eqwip.com',
      description: '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ò–¢–ú–û - –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
      website: 'https://itmo.ru',
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      establishedYear: 1900,
      studentCount: 12000,
      specialties: ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞']
    },
    {
      name: '–í–®–≠',
      email: 'university5@eqwip.com',
      description: '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç "–í—ã—Å—à–∞—è —à–∫–æ–ª–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏"',
      website: 'https://www.hse.ru',
      location: '–ú–æ—Å–∫–≤–∞',
      establishedYear: 1992,
      studentCount: 45000,
      specialties: ['–≠–∫–æ–Ω–æ–º–∏–∫–∞', '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '–°–æ—Ü–∏–æ–ª–æ–≥–∏—è', '–ü–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è']
    }
  ]

  const createdUniversities = []
  
  for (const uniData of universities) {
    const hashedPassword = await bcrypt.hash('123456', 10)
    
    const university = await prisma.user.create({
      data: {
        email: uniData.email,
        password: hashedPassword,
        role: UserRole.UNIVERSITY,
        emailVerified: true,
        name: uniData.name
      }
    })

    const universityProfile = await prisma.university.create({
      data: {
        userId: university.id,
        name: uniData.name,
        description: uniData.description,
        website: uniData.website,
        location: uniData.location,
        establishedYear: uniData.establishedYear,
        studentCount: uniData.studentCount,
        specialties: JSON.stringify(uniData.specialties)
      }
    })

    createdUniversities.push(universityProfile)
  }

  // Create company profiles
  await prisma.company.create({
    data: {
      name: 'TechCorp',
      description: '–í–µ–¥—É—â–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π',
      website: 'https://techcorp.com',
      location: '–ú–æ—Å–∫–≤–∞',
      industry: 'IT',
      size: '1000-5000',
      foundedYear: 2010,
      logo: '/api/files/techcorp-logo.png',
      isVerified: true,
      employerId: employer1.id
    }
  })

  await prisma.company.create({
    data: {
      name: 'DataTech',
      description: '–ö–æ–º–ø–∞–Ω–∏—è –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é',
      website: 'https://datatech.com',
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      industry: 'Data Science',
      size: '100-500',
      foundedYear: 2015,
      logo: '/api/files/datatech-logo.png',
      isVerified: true,
      employerId: employer2.id
    }
  })

  // Create skills
  const skills = [
    'React', 'TypeScript', 'Node.js', 'Python', 'JavaScript', 'AWS', 'Docker',
    'Machine Learning', 'TensorFlow', 'PyTorch', 'SQL', 'MongoDB', 'PostgreSQL',
    'Git', 'Linux', 'Kubernetes', 'GraphQL', 'REST API', 'Vue.js', 'Angular'
  ]

  for (const skillName of skills) {
    await prisma.skill.create({
      data: {
        name: skillName,
        category: 'Technical'
      }
    })
  }

  // Create candidate profiles
  const candidateProfilesData = [
    {
      userId: candidate1.id,
      fullName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤',
      title: 'Senior Full Stack Developer',
      experience: 5,
      location: '–ú–æ—Å–∫–≤–∞',
      skills: ['React', 'TypeScript', 'Node.js', 'Python', 'AWS', 'Docker'],
      bio: '–û–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.'
    },
    {
      userId: candidate2.id,
      fullName: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
      title: 'Python ML Engineer',
      experience: 4,
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      skills: ['Python', 'Machine Learning', 'TensorFlow', 'PyTorch', 'SQL'],
      bio: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.'
    },
    {
      userId: testUser.id,
      fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      title: 'Junior Developer',
      experience: 1,
      location: '–ú–æ—Å–∫–≤–∞',
      skills: ['JavaScript', 'React', 'HTML', 'CSS'],
      bio: '–ù–∞—á–∏–Ω–∞—é—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∏–∑—É—á–∞—é—â–∏–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.'
    }
  ]

  for (const profileData of candidateProfilesData) {
    await prisma.candidateProfile.create({
      data: {
        userId: profileData.userId,
        fullName: profileData.fullName,
        title: profileData.title,
        experience: profileData.experience,
        location: profileData.location,
        skills: profileData.skills,
        bio: profileData.bio,
        isActive: true
      }
    })
  }

  // Create jobs
  const jobs = [
    {
      title: 'Senior React Developer',
      description: '–ò—â–µ–º –æ–ø—ã—Ç–Ω–æ–≥–æ React —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∫—Ä—É–ø–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º',
      requirements: ['React', 'TypeScript', 'Node.js', '5+ –ª–µ—Ç –æ–ø—ã—Ç–∞'],
      benefits: ['–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞'],
      salaryMin: 150000,
      salaryMax: 250000,
      currency: 'RUB',
      location: '–ú–æ—Å–∫–≤–∞',
      workFormat: '–ì–∏–±—Ä–∏–¥–Ω–∞—è',
      employmentType: '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      experience: 'Senior',
      category: 'IT',
      isActive: true,
      employerId: employer1.id
    },
    {
      title: 'Python ML Engineer',
      description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
      requirements: ['Python', 'Machine Learning', 'TensorFlow', '3+ –ª–µ—Ç –æ–ø—ã—Ç–∞'],
      benefits: ['–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã', '–û–±—É—á–µ–Ω–∏–µ', '–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫'],
      salaryMin: 120000,
      salaryMax: 200000,
      currency: 'RUB',
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      workFormat: '–£–¥–∞–ª–µ–Ω–Ω–∞—è',
      employmentType: '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      experience: 'Middle',
      category: 'IT',
      isActive: true,
      employerId: employer2.id
    },
    {
      title: 'Frontend Developer',
      description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
      requirements: ['JavaScript', 'React', 'CSS', '2+ –ª–µ—Ç –æ–ø—ã—Ç–∞'],
      benefits: ['–ú–æ–ª–æ–¥–∞—è –∫–æ–º–∞–Ω–¥–∞', '–ü—Ä–æ–µ–∫—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'],
      salaryMin: 80000,
      salaryMax: 150000,
      currency: 'RUB',
      location: '–ú–æ—Å–∫–≤–∞',
      workFormat: '–û—Ñ–∏—Å',
      employmentType: '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      experience: 'Junior',
      category: 'IT',
      isActive: true,
      employerId: employer1.id
    }
  ]

  for (const jobData of jobs) {
    await prisma.job.create({
      data: jobData
    })
  }

  // Create applications
  const allJobs = await prisma.job.findMany()
  const candidateProfiles = await prisma.candidateProfile.findMany()
  
  if (candidateProfiles[0] && allJobs[0]) {
    await prisma.application.create({
      data: {
        candidateId: candidateProfiles[0].id,
        jobId: allJobs[0].id,
        status: ApplicationStatus.PENDING,
        coverLetter: '–ò–º–µ—é –±–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å React –∏ TypeScript, –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.'
      }
    })
  }

  if (candidateProfiles[1] && allJobs[1]) {
    await prisma.application.create({
      data: {
        candidateId: candidateProfiles[1].id,
        jobId: allJobs[1].id,
        status: ApplicationStatus.REVIEWED,
        coverLetter: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏, –∏–º–µ—é –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å TensorFlow –∏ PyTorch.'
      }
    })
  }

  // Create internships for universities
  console.log('üéì Creating internships...')
  
  const internships = [
    {
      title: '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
      description: '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ IT –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
      specialty: 'IT',
      studentCount: 5,
      location: '–ú–æ—Å–∫–≤–∞',
      universityId: createdUniversities[0].id
    },
    {
      title: '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é',
      description: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
      specialty: 'Data Science',
      studentCount: 3,
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      universityId: createdUniversities[1].id
    },
    {
      title: '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      description: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö',
      specialty: 'Cybersecurity',
      studentCount: 4,
      location: '–ú–æ—Å–∫–≤–∞',
      universityId: createdUniversities[2].id
    }
  ]

  for (const internshipData of internships) {
    await prisma.internshipPosting.create({
      data: {
        title: internshipData.title,
        specialty: internshipData.specialty,
        description: internshipData.description,
        studentCount: internshipData.studentCount,
        startDate: new Date(),
        endDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days from now
        location: internshipData.location,
        isActive: true,
        universityId: internshipData.universityId
      }
    })
  }

  // Create subscriptions for all users
  const allUsers = await prisma.user.findMany()
  for (const user of allUsers) {
    await prisma.subscription.create({
      data: {
        userId: user.id,
        plan: SubscriptionPlan.FREE
      }
    })
  }

  // Create notifications for all users
  for (const user of allUsers) {
    await prisma.notification.create({
      data: {
        userId: user.id,
        type: NotificationType.SYSTEM,
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EQWIP!',
        message: '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –ø—É–±–ª–∏–∫—É–π—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏.'
      }
    })
  }

  console.log('‚úÖ Database seeded successfully!')
  console.log('üéì Created universities:', universities.length)
  console.log('üéì Created internships:', internships.length)
}

main()
  .catch((e) => {
    console.error('‚ùå Error seeding database:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })