#!/usr/bin/env node

/**
 * EQWIP Functional Test
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ TypeScript –æ—à–∏–±–æ–∫
 */

const fs = require('fs');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function functionalTest() {
  log('üöÄ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ EQWIP', 'blue');
  log('=' * 50, 'blue');
  
  let passed = 0;
  let failed = 0;
  let warnings = 0;
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  log('\nüìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:', 'cyan');
  
  const criticalFiles = [
    'package.json',
    'next.config.ts',
    'prisma/schema.prisma',
    'src/app/layout.tsx',
    'src/lib/db.ts',
    'env.example',
    '.gitignore',
    'README.md',
    'TEST_ACCOUNTS.md'
  ];
  
  criticalFiles.forEach(file => {
    if (fs.existsSync(file)) {
      log(`  ‚úÖ ${file}`, 'green');
      passed++;
    } else {
      log(`  ‚ùå ${file}`, 'red');
      failed++;
    }
  });
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  log('\nüì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:', 'cyan');
  
  try {
    const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const mainDeps = ['next', 'react', 'react-dom', '@prisma/client'];
    const missingMain = mainDeps.filter(dep => !pkg.dependencies[dep]);
    
    if (missingMain.length === 0) {
      log('  ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'green');
      passed++;
    } else {
      log(`  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingMain.join(', ')}`, 'red');
      failed++;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º UI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const uiDeps = ['@radix-ui/react-button', '@radix-ui/react-dialog', 'lucide-react'];
    const missingUI = uiDeps.filter(dep => !pkg.dependencies[dep]);
    
    if (missingUI.length === 0) {
      log('  ‚úÖ UI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'green');
      passed++;
    } else {
      log(`  ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç UI: ${missingUI.join(', ')}`, 'yellow');
      warnings++;
    }
    
  } catch (error) {
    log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json', 'red');
    failed++;
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  log('\nüóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•:', 'cyan');
  
  if (fs.existsSync('prisma/dev.db')) {
    log('  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'green');
    passed++;
  } else {
    log('  ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'red');
    failed++;
  }
  
  if (fs.existsSync('prisma/schema.prisma')) {
    const schema = fs.readFileSync('prisma/schema.prisma', 'utf8');
    if (schema.includes('model User') && schema.includes('model Job')) {
      log('  ‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'green');
      passed++;
    } else {
      log('  ‚ùå –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–ø–æ–ª–Ω–∞—è', 'red');
      failed++;
    }
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  log('\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:', 'cyan');
  
  // Next.js –∫–æ–Ω—Ñ–∏–≥
  if (fs.existsSync('next.config.ts')) {
    log('  ‚úÖ Next.js –∫–æ–Ω—Ñ–∏–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'green');
    passed++;
  } else {
    log('  ‚ùå Next.js –∫–æ–Ω—Ñ–∏–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'red');
    failed++;
  }
  
  // Tailwind –∫–æ–Ω—Ñ–∏–≥
  if (fs.existsSync('tailwind.config.ts')) {
    log('  ‚úÖ Tailwind –∫–æ–Ω—Ñ–∏–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'green');
    passed++;
  } else {
    log('  ‚ùå Tailwind –∫–æ–Ω—Ñ–∏–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'red');
    failed++;
  }
  
  // TypeScript –∫–æ–Ω—Ñ–∏–≥
  if (fs.existsSync('tsconfig.json')) {
    log('  ‚úÖ TypeScript –∫–æ–Ω—Ñ–∏–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'green');
    passed++;
  } else {
    log('  ‚ùå TypeScript –∫–æ–Ω—Ñ–∏–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'red');
    failed++;
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
  log('\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:', 'cyan');
  
  const architectureFiles = [
    'src/lib/core/BaseService.ts',
    'src/lib/core/BaseRepository.ts',
    'src/lib/core/BaseController.ts',
    'src/lib/repositories/JobRepository.ts',
    'src/lib/services/JobService.ts',
    'src/lib/controllers/JobController.ts'
  ];
  
  architectureFiles.forEach(file => {
    if (fs.existsSync(file)) {
      log(`  ‚úÖ ${file}`, 'green');
      passed++;
    } else {
      log(`  ‚ùå ${file}`, 'red');
      failed++;
    }
  });
  
  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
  log('\nüìÑ –°–¢–†–ê–ù–ò–¶–´:', 'cyan');
  
  const pages = [
    'src/app/page.tsx',
    'src/app/jobs/page.tsx',
    'src/app/auth/signin/page.tsx',
    'src/app/auth/signup/page.tsx',
    'src/app/dashboard/page.tsx',
    'src/app/employer/page.tsx',
    'src/app/admin/page.tsx'
  ];
  
  pages.forEach(page => {
    if (fs.existsSync(page)) {
      log(`  ‚úÖ ${page}`, 'green');
      passed++;
    } else {
      log(`  ‚ùå ${page}`, 'red');
      failed++;
    }
  });
  
  // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
  log('\nüåê API ENDPOINTS:', 'cyan');
  
  const apiEndpoints = [
    'src/app/api/auth/[...nextauth]/route.ts',
    'src/app/api/jobs/route.ts',
    'src/app/api/companies/route.ts',
    'src/app/api/candidates/route.ts',
    'src/app/api/admin/route.ts'
  ];
  
  apiEndpoints.forEach(endpoint => {
    if (fs.existsSync(endpoint)) {
      log(`  ‚úÖ ${endpoint}`, 'green');
      passed++;
    } else {
      log(`  ‚ùå ${endpoint}`, 'red');
      failed++;
    }
  });
  
  // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  log('\nüß© –ö–û–ú–ü–û–ù–ï–ù–¢–´:', 'cyan');
  
  const components = [
    'src/components/Header.tsx',
    'src/components/Footer.tsx',
    'src/components/ui/button.tsx',
    'src/components/ui/input.tsx',
    'src/components/ui/card.tsx'
  ];
  
  components.forEach(component => {
    if (fs.existsSync(component)) {
      log(`  ‚úÖ ${component}`, 'green');
      passed++;
    } else {
      log(`  ‚ùå ${component}`, 'red');
      failed++;
    }
  });
  
  // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  log('\nüîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:', 'cyan');
  
  // .env –≤ gitignore
  const gitignore = fs.readFileSync('.gitignore', 'utf8');
  if (gitignore.includes('.env')) {
    log('  ‚úÖ .env –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è', 'green');
    passed++;
  } else {
    log('  ‚ùå .env –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è', 'red');
    failed++;
  }
  
  // env.example
  if (fs.existsSync('env.example')) {
    const envExample = fs.readFileSync('env.example', 'utf8');
    if (envExample.includes('DATABASE_URL') && envExample.includes('NEXTAUTH_SECRET')) {
      log('  ‚úÖ env.example —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', 'green');
      passed++;
    } else {
      log('  ‚ö†Ô∏è  env.example –Ω–µ–ø–æ–ª–Ω—ã–π', 'yellow');
      warnings++;
    }
  }
  
  // 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  log('\nüìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:', 'cyan');
  
  const docs = [
    'README.md',
    'LICENSE',
    'TEST_ACCOUNTS.md',
    'TESTING.md'
  ];
  
  docs.forEach(doc => {
    if (fs.existsSync(doc)) {
      log(`  ‚úÖ ${doc}`, 'green');
      passed++;
    } else {
      log(`  ‚ùå ${doc}`, 'red');
      failed++;
    }
  });
  
  // 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è TypeScript –æ—à–∏–±–∫–∏)
  log('\nüî® –°–ë–û–†–ö–ê:', 'cyan');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Next.js
    execSync('npx next build --dry-run', { stdio: 'pipe' });
    log('  ‚úÖ Next.js —Å–±–æ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞', 'green');
    passed++;
  } catch (error) {
    log('  ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–±–æ—Ä–∫–æ–π (–≤–æ–∑–º–æ–∂–Ω–æ TypeScript –æ—à–∏–±–∫–∏)', 'yellow');
    warnings++;
  }
  
  // 12. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  log('\nüë• –¢–ï–°–¢–û–í–´–ï –ê–ö–ö–ê–£–ù–¢–´:', 'cyan');
  
  if (fs.existsSync('TEST_ACCOUNTS.md')) {
    const testAccounts = fs.readFileSync('TEST_ACCOUNTS.md', 'utf8');
    if (testAccounts.includes('admin@eqwip.com') && testAccounts.includes('employer1@eqwip.com')) {
      log('  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'green');
      passed++;
    } else {
      log('  ‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ–ø–æ–ª–Ω—ã–µ', 'yellow');
      warnings++;
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\n' + '=' * 50, 'blue');
  log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢', 'blue');
  log('=' * 50, 'blue');
  
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`, 'red');
  log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings}`, 'yellow');
  
  const total = passed + failed + warnings;
  const successRate = ((passed / total) * 100).toFixed(1);
  
  log(`\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, successRate > 80 ? 'green' : 'yellow');
  
  if (failed === 0) {
    log('\nüéâ –í–°–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!', 'green');
    log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', 'green');
    log('‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'green');
    log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', 'green');
    
    if (warnings > 0) {
      log('\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞', 'yellow');
    }
  } else {
    log('\n‚ùå –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!', 'red');
    log('‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'yellow');
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (warnings > 0 || failed > 0) {
    log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:', 'cyan');
    
    if (failed > 0) {
      log('  ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏', 'yellow');
    }
    
    if (warnings > 0) {
      log('  ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', 'yellow');
    }
    
    log('  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run dev –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã', 'yellow');
    log('  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã', 'yellow');
  }
  
  return failed === 0;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  functionalTest();
}

module.exports = { functionalTest };
