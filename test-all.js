#!/usr/bin/env node

/**
 * EQWIP Complete Test Suite
 * –ì–ª–∞–≤–Ω—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
 */

const { execSync } = require('child_process');
const fs = require('fs');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤
const { runAllTests: runSystemTests } = require('./test-system.js');
const { runServerTests } = require('./test-server.js');

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runCompleteTest() {
  log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø EQWIP', 'bright');
  log('=' * 80, 'blue');
  log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã...', 'cyan');
  
  const startTime = Date.now();
  let allPassed = true;
  
  try {
    // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    log('\nüìÅ –≠–¢–ê–ü 1: –§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø', 'magenta');
    const systemPassed = runSystemTests();
    if (!systemPassed) {
      allPassed = false;
      log('‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!', 'red');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    log('\nüì¶ –≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô', 'magenta');
    try {
      execSync('npm list --depth=0', { stdio: 'pipe' });
      log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
    } catch (error) {
      log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏', 'red');
      allPassed = false;
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript
    log('\nüîß –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê TYPESCRIPT', 'magenta');
    try {
      execSync('npx tsc --noEmit', { stdio: 'pipe' });
      log('‚úÖ TypeScript –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫', 'green');
    } catch (error) {
      log('‚ùå TypeScript –æ—à–∏–±–∫–∏ –Ω–∞–π–¥–µ–Ω—ã', 'red');
      allPassed = false;
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
    log('\nüî® –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –°–ë–û–†–ö–ò', 'magenta');
    try {
      execSync('npm run build', { stdio: 'pipe' });
      log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ', 'green');
    } catch (error) {
      log('‚ùå –û—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏', 'red');
      allPassed = false;
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    log('\nüóÑÔ∏è –≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•', 'magenta');
    try {
      execSync('npx prisma db push', { stdio: 'pipe' });
      log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'green');
    } catch (error) {
      log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'red');
      allPassed = false;
    }
    
    // 6. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    log('\nüåê –≠–¢–ê–ü 6: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ï–†–ê', 'magenta');
    log('–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...', 'yellow');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    const serverProcess = execSync('npm run dev', { 
      stdio: 'pipe',
      detached: true 
    });
    
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    try {
      const serverPassed = await runServerTests();
      if (!serverPassed) {
        allPassed = false;
        log('‚ùå –¢–µ—Å—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!', 'red');
      }
    } catch (error) {
      log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞', 'red');
      allPassed = false;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    try {
      process.kill(serverProcess.pid);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    }
    
  } catch (error) {
    log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    allPassed = false;
  }
  
  const endTime = Date.now();
  const duration = ((endTime - startTime) / 1000).toFixed(2);
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\n' + '=' * 80, 'blue');
  log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢', 'bright');
  log('=' * 80, 'blue');
  
  if (allPassed) {
    log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'green');
    log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', 'green');
    log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç', 'green');
    log('‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'green');
    log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', 'green');
  } else {
    log('‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!', 'red');
    log('‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'yellow');
    log('üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ', 'yellow');
  }
  
  log(`\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`, 'cyan');
  log('=' * 80, 'blue');
  
  return allPassed;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runCompleteTest().then(success => {
    process.exit(success ? 0 : 1);
  }).catch(error => {
    log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = { runCompleteTest };
