#!/usr/bin/env node

/**
 * EQWIP Quick Test
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

const fs = require('fs');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function quickTest() {
  log('üöÄ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê EQWIP', 'blue');
  log('=' * 40, 'blue');
  
  let passed = 0;
  let failed = 0;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
  const criticalFiles = [
    'package.json',
    'next.config.ts',
    'prisma/schema.prisma',
    'src/app/layout.tsx',
    'src/lib/db.ts',
    'env.example',
    '.gitignore',
    'README.md'
  ];
  
  log('\nüìÅ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã:', 'yellow');
  criticalFiles.forEach(file => {
    if (fs.existsSync(file)) {
      log(`  ‚úÖ ${file}`, 'green');
      passed++;
    } else {
      log(`  ‚ùå ${file}`, 'red');
      failed++;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  log('\nüì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:', 'yellow');
  try {
    const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const critical = ['next', 'react', 'react-dom', '@prisma/client'];
    const missing = critical.filter(dep => !pkg.dependencies[dep]);
    
    if (missing.length === 0) {
      log('  ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç', 'green');
      passed++;
    } else {
      log(`  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missing.join(', ')}`, 'red');
      failed++;
    }
  } catch (error) {
    log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json', 'red');
    failed++;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  log('\nüóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', 'yellow');
  if (fs.existsSync('prisma/dev.db')) {
    log('  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'green');
    passed++;
  } else {
    log('  ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'red');
    failed++;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript
  log('\nüîß TypeScript:', 'yellow');
  try {
    execSync('npx tsc --noEmit', { stdio: 'pipe' });
    log('  ‚úÖ TypeScript –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è', 'green');
    passed++;
  } catch (error) {
    log('  ‚ùå TypeScript –æ—à–∏–±–∫–∏', 'red');
    failed++;
  }
  
  // –ò—Ç–æ–≥
  log('\n' + '=' * 40, 'blue');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`, 'red');
  
  const total = passed + failed;
  const successRate = ((passed / total) * 100).toFixed(1);
  
  if (failed === 0) {
    log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!', 'green');
    log('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!', 'green');
  } else {
    log(`\n‚ö†Ô∏è  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, 'yellow');
    log('–¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'yellow');
  }
  
  return failed === 0;
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  quickTest();
}

module.exports = { quickTest };
