#!/usr/bin/env node

/**
 * EQWIP Server Test Suite
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ –∏ API endpoints
 */

const http = require('http');
const https = require('https');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const results = {
  passed: 0,
  failed: 0,
  warnings: 0,
  errors: []
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function test(name, testFn) {
  try {
    log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${name}`, 'cyan');
    const result = testFn();
    if (result === true) {
      log(`‚úÖ –ü–†–û–ô–î–ï–ù: ${name}`, 'green');
      results.passed++;
    } else if (result === false) {
      log(`‚ùå –ü–†–û–í–ê–õ–ï–ù: ${name}`, 'red');
      results.failed++;
      results.errors.push(name);
    } else {
      log(`‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: ${name} - ${result}`, 'yellow');
      results.warnings++;
    }
  } catch (error) {
    log(`üí• –û–®–ò–ë–ö–ê: ${name} - ${error.message}`, 'red');
    results.failed++;
    results.errors.push(`${name}: ${error.message}`);
  }
}

// HTTP –∑–∞–ø—Ä–æ—Å
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const client = isHttps ? https : http;
    
    const reqOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: options.headers || {}
    };
    
    const req = client.request(reqOptions, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });
    
    req.on('error', reject);
    req.setTimeout(5000, () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });
    
    if (options.body) {
      req.write(options.body);
    }
    
    req.end();
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
function testServerStart() {
  log('\nüöÄ –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê', 'bright');
  
  test('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
      execSync('npm run build', { stdio: 'pipe', timeout: 30000 });
      return true;
    } catch (error) {
      return `–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: ${error.message}`;
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
async function testAPIEndpoints() {
  log('\nüåê –ü–†–û–í–ï–†–ö–ê API ENDPOINTS', 'bright');
  
  const baseUrl = 'http://localhost:3000';
  const endpoints = [
    { path: '/api/health', method: 'GET', expectedStatus: 200 },
    { path: '/api/jobs', method: 'GET', expectedStatus: 200 },
    { path: '/api/companies', method: 'GET', expectedStatus: 200 },
    { path: '/api/stats', method: 'GET', expectedStatus: 200 },
    { path: '/api/auth/session', method: 'GET', expectedStatus: 200 }
  ];
  
  for (const endpoint of endpoints) {
    test(`API ${endpoint.method} ${endpoint.path}`, async () => {
      try {
        const response = await makeRequest(`${baseUrl}${endpoint.path}`, {
          method: endpoint.method
        });
        
        if (response.statusCode === endpoint.expectedStatus) {
          return true;
        } else {
          return `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å ${endpoint.expectedStatus}, –ø–æ–ª—É—á–µ–Ω ${response.statusCode}`;
        }
      } catch (error) {
        return `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`;
      }
    });
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
async function testPages() {
  log('\nüìÑ –ü–†–û–í–ï–†–ö–ê –°–¢–†–ê–ù–ò–¶', 'bright');
  
  const baseUrl = 'http://localhost:3000';
  const pages = [
    { path: '/', name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' },
    { path: '/jobs', name: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–π' },
    { path: '/auth/signin', name: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞' },
    { path: '/auth/signup', name: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' },
    { path: '/about', name: '–û –Ω–∞—Å' },
    { path: '/pricing', name: '–¢–∞—Ä–∏—Ñ—ã' }
  ];
  
  for (const page of pages) {
    test(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page.name} (${page.path})`, async () => {
      try {
        const response = await makeRequest(`${baseUrl}${page.path}`);
        
        if (response.statusCode === 200) {
          return true;
        } else {
          return `–°—Ç–∞—Ç—É—Å: ${response.statusCode}`;
        }
      } catch (error) {
        return `–û—à–∏–±–∫–∞: ${error.message}`;
      }
    });
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testAuthentication() {
  log('\nüîê –ü–†–û–í–ï–†–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò', 'bright');
  
  const baseUrl = 'http://localhost:3000';
  
  test('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞', async () => {
    try {
      const response = await makeRequest(`${baseUrl}/auth/signin`);
      return response.statusCode === 200;
    } catch (error) {
      return `–û—à–∏–±–∫–∞: ${error.message}`;
    }
  });
  
  test('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞', async () => {
    try {
      const response = await makeRequest(`${baseUrl}/auth/signup`);
      return response.statusCode === 200;
    } catch (error) {
      return `–û—à–∏–±–∫–∞: ${error.message}`;
    }
  });
  
  test('API —Å–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    try {
      const response = await makeRequest(`${baseUrl}/api/auth/session`);
      return response.statusCode === 200;
    } catch (error) {
      return `–û—à–∏–±–∫–∞: ${error.message}`;
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function testPerformance() {
  log('\n‚ö° –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò', 'bright');
  
  const baseUrl = 'http://localhost:3000';
  
  test('–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã', async () => {
    try {
      const start = Date.now();
      const response = await makeRequest(`${baseUrl}/`);
      const duration = Date.now() - start;
      
      if (response.statusCode === 200) {
        return duration < 3000 || `–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${duration}ms`;
      } else {
        return `–û—à–∏–±–∫–∞: ${response.statusCode}`;
      }
    } catch (error) {
      return `–û—à–∏–±–∫–∞: ${error.message}`;
    }
  });
  
  test('–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API –≤–∞–∫–∞–Ω—Å–∏–π', async () => {
    try {
      const start = Date.now();
      const response = await makeRequest(`${baseUrl}/api/jobs`);
      const duration = Date.now() - start;
      
      if (response.statusCode === 200) {
        return duration < 2000 || `–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${duration}ms`;
      } else {
        return `–û—à–∏–±–∫–∞: ${response.statusCode}`;
      }
    } catch (error) {
      return `–û—à–∏–±–∫–∞: ${error.message}`;
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
async function testErrorHandling() {
  log('\nüö® –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö', 'bright');
  
  const baseUrl = 'http://localhost:3000';
  
  test('404 —Å—Ç—Ä–∞–Ω–∏—Ü–∞', async () => {
    try {
      const response = await makeRequest(`${baseUrl}/nonexistent-page`);
      return response.statusCode === 404;
    } catch (error) {
      return `–û—à–∏–±–∫–∞: ${error.message}`;
    }
  });
  
  test('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API endpoint', async () => {
    try {
      const response = await makeRequest(`${baseUrl}/api/nonexistent`);
      return response.statusCode === 404;
    } catch (error) {
      return `–û—à–∏–±–∫–∞: ${error.message}`;
    }
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runServerTests() {
  log('üåê –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ï–†–í–ï–†–ê EQWIP', 'bright');
  log('=' * 60, 'blue');
  
  testServerStart();
  await testAPIEndpoints();
  await testPages();
  await testAuthentication();
  await testPerformance();
  await testErrorHandling();
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\n' + '=' * 60, 'blue');
  log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –°–ï–†–í–ï–†–ê', 'bright');
  log('=' * 60, 'blue');
  
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.failed}`, 'red');
  log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${results.warnings}`, 'yellow');
  
  if (results.errors.length > 0) {
    log('\nüí• –û–®–ò–ë–ö–ò:', 'red');
    results.errors.forEach(error => {
      log(`  ‚Ä¢ ${error}`, 'red');
    });
  }
  
  const total = results.passed + results.failed + results.warnings;
  const successRate = ((results.passed / total) * 100).toFixed(1);
  
  log(`\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, successRate > 80 ? 'green' : 'yellow');
  
  if (results.failed === 0) {
    log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –°–ï–†–í–ï–†–ê –ü–†–û–ô–î–ï–ù–´!', 'green');
  } else {
    log('\n‚ö†Ô∏è  –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø', 'yellow');
  }
  
  return results.failed === 0;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runServerTests().catch(console.error);
}

module.exports = { runServerTests, test, results };
