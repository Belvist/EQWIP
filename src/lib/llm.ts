/* LLM helper with pluggable providers (gigachat | ollama | openai | openrouter). */
import axios from 'axios'
import crypto from 'crypto'

export type LLMChatOptions = {
  model?: string
  system?: string
  temperature?: number
  maxTokens?: number
  timeoutMs?: number
  json?: boolean
  keepAlive?: string
}

const AI_PROVIDER = (process.env.AI_PROVIDER || 'ollama').toLowerCase()
const DEFAULT_TIMEOUT_MS = Number(process.env.AI_CHAT_TIMEOUT_MS || '10000')

// GigaChat defaults
const GIGACHAT_BASE_URL = process.env.GIGACHAT_BASE_URL || 'https://ngw.devices.sberbank.ru:9443/api/v2'
const GIGACHAT_API_KEY = process.env.GIGACHAT_API_KEY || ''
const GIGACHAT_MODEL = process.env.GIGACHAT_CHAT_MODEL || 'GigaChat:latest'

// Ollama defaults (fallback)
const OLLAMA_URL = process.env.OLLAMA_URL || 'http://127.0.0.1:11434'
const OLLAMA_MODEL = process.env.OLLAMA_CHAT_MODEL || 'qwen2.5:3b-instruct'

// OpenAI/OpenRouter defaults
const OPENAI_BASE_URL = process.env.OPENAI_BASE_URL || 'https://api.openai.com/v1'
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || ''
const OPENAI_MODEL = process.env.OPENAI_CHAT_MODEL || 'gpt-4o-mini'
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY || ''
const OPENROUTER_BASE_URL = process.env.OPENROUTER_BASE_URL || 'https://openrouter.ai/api/v1'
const OLLAMA_KEEP_ALIVE = process.env.OLLAMA_KEEP_ALIVE || process.env.AI_KEEP_ALIVE || ''

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
function getAvailableProviders(): string[] {
  const providers: string[] = []
  
  // 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Ollama (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
  if (AI_PROVIDER === 'ollama') {
    providers.push('ollama')
  }
  
  // 2. GigaChat (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
  if (AI_PROVIDER === 'gigachat' && GIGACHAT_API_KEY) {
    providers.push('gigachat')
  }
  
  // 3. OpenAI (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
  if (AI_PROVIDER === 'openai' && OPENAI_API_KEY) {
    providers.push('openai')
  }
  
  // 4. OpenRouter (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
  if (AI_PROVIDER === 'openrouter' && OPENROUTER_API_KEY) {
    providers.push('openrouter')
  }
  
  // 5. Fallback: –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º fallback –≤ –∫–æ–Ω–µ—Ü
  providers.push('fallback')
  
  return providers
}

export async function llmChat(prompt: string, opts: LLMChatOptions = {}): Promise<string> {
  const controller = new AbortController()
  const timeout = setTimeout(() => controller.abort(), opts.timeoutMs ?? DEFAULT_TIMEOUT_MS)
  try {
    const systemMsg = opts.system ? [{ role: 'system', content: opts.system }] : []
    const messages = [...systemMsg, { role: 'user' as const, content: prompt }]

    // –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å fallback
    const providers = getAvailableProviders()
    
    for (const provider of providers) {
      try {
        if (provider === 'ollama') {
          // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
          const prompt = messages.map(msg => {
            if (msg.role === 'system') return `System: ${msg.content}`
            if (msg.role === 'user') return `User: ${msg.content}`
            if (msg.role === 'assistant') return `Assistant: ${msg.content}`
            return msg.content
          }).join('\n\n')
          
          const body: any = {
            model: opts.model || OLLAMA_MODEL,
            prompt: prompt,
            options: {
              temperature: opts.temperature ?? 0.2,
              num_ctx: Math.min(Math.max(opts.maxTokens ?? 1024, 256), 4096),
              num_predict: Math.min(Math.max(opts.maxTokens ?? 256, 64), 1024)
            },
            stream: false,
            ...(opts.json ? { format: 'json' } : {})
          }
          if (opts.keepAlive || OLLAMA_KEEP_ALIVE) body.keep_alive = opts.keepAlive || OLLAMA_KEEP_ALIVE
          
          const r = await fetch(`${OLLAMA_URL}/api/generate`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body),
            signal: controller.signal
          })
          
          if (r.ok) {
            const j = await r.json()
            const text: string = j?.response || ''
            console.log(`‚úÖ Ollama response successful`)
            return text
          } else {
            console.warn(`‚ö†Ô∏è Ollama failed (${r.status}), trying next provider`)
            continue
          }
        }

        if (provider === 'gigachat') {
          if (!GIGACHAT_API_KEY) {
            console.warn('‚ö†Ô∏è GigaChat API key not set, trying next provider')
            continue
          }
          
          // –°–æ–∑–¥–∞–µ–º axios instance —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL –¥–ª—è GigaChat
          const axiosInstance = axios.create({
            httpsAgent: new (require('https').Agent)({
              rejectUnauthorized: false
            }),
            timeout: opts.timeoutMs ?? DEFAULT_TIMEOUT_MS
          })
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
          const tokenResponse = await axiosInstance.post(`${GIGACHAT_BASE_URL}/oauth`, 
            'scope=GIGACHAT_API_PERS',
            {
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json',
                'RqUID': crypto.randomUUID(),
                'Authorization': `Basic ${GIGACHAT_API_KEY}`
              },
              signal: controller.signal
            }
          )
          
          const accessToken = tokenResponse.data.access_token
          if (!accessToken) {
            console.warn('‚ö†Ô∏è GigaChat token missing, trying next provider')
            continue
          }
          
          // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É
          const chatResponse = await axiosInstance.post(`${GIGACHAT_BASE_URL}/chat/completions`, {
            model: opts.model || GIGACHAT_MODEL,
            messages,
            temperature: opts.temperature ?? 0.2,
            max_tokens: opts.maxTokens ?? 512,
            stream: false,
            ...(opts.json ? { response_format: { type: 'json_object' as const } } : {})
          }, {
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'Authorization': `Bearer ${accessToken}`
            },
            signal: controller.signal
          })
          
          const text: string = chatResponse.data?.choices?.[0]?.message?.content || ''
          console.log(`‚úÖ GigaChat response successful`)
          return text
        }

        if (provider === 'openai') {
          if (!OPENAI_API_KEY) {
            console.warn('‚ö†Ô∏è OpenAI API key not set, trying next provider')
            continue
          }
          
          const r = await fetch(`${OPENAI_BASE_URL}/chat/completions`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${OPENAI_API_KEY}`
            },
            body: JSON.stringify({
              model: opts.model || OPENAI_MODEL,
              messages,
              temperature: opts.temperature ?? 0.2,
              max_tokens: opts.maxTokens ?? 512,
              stream: false,
              ...(opts.json ? { response_format: { type: 'json_object' as const } } : {})
            }),
            signal: controller.signal
          })
          
          if (r.ok) {
            const j: any = await r.json()
            const text: string = j?.choices?.[0]?.message?.content || ''
            console.log(`‚úÖ OpenAI response successful`)
            return text
          } else {
            console.warn(`‚ö†Ô∏è OpenAI failed (${r.status}), trying next provider`)
            continue
          }
        }

        if (provider === 'openrouter') {
          if (!OPENROUTER_API_KEY) {
            console.warn('‚ö†Ô∏è OpenRouter API key not set, trying next provider')
            continue
          }
          
          const r = await fetch(`${OPENROUTER_BASE_URL}/chat/completions`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${OPENROUTER_API_KEY}`
            },
            body: JSON.stringify({
              model: opts.model || process.env.OPENROUTER_MODEL || 'openai/gpt-4o-mini',
              messages,
              temperature: opts.temperature ?? 0.2,
              max_tokens: opts.maxTokens ?? 512,
              stream: false,
              ...(opts.json ? { response_format: { type: 'json_object' as const } } : {})
            }),
            signal: controller.signal
          })
          
          if (r.ok) {
            const j: any = await r.json()
            const text: string = j?.choices?.[0]?.message?.content || ''
            console.log(`‚úÖ OpenRouter response successful`)
            return text
          } else {
            console.warn(`‚ö†Ô∏è OpenRouter failed (${r.status}), trying next provider`)
            continue
          }
        }

        if (provider === 'fallback') {
          console.log('üîÑ Using fallback response system')
          return generateFallbackResponse(prompt, opts)
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Provider ${provider} failed:`, error instanceof Error ? error.message : 'Unknown error')
        continue
      }
    }

    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
    console.error('‚ùå All AI providers failed, using emergency fallback')
    return generateFallbackResponse(prompt, opts)
  } catch (error) {
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    console.error('‚ùå Critical error in llmChat:', error instanceof Error ? error.message : 'Unknown error')
    return generateFallbackResponse(prompt, opts)
  } finally {
    clearTimeout(timeout)
  }
}

function generateFallbackResponse(prompt: string, opts: LLMChatOptions = {}): string {
  console.log('üîÑ Generating intelligent fallback response...')
  
  if (opts.json) {
    // –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ
    const promptLower = prompt.toLowerCase()
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const hasSalary = /–∑–∞—Ä–ø–ª–∞—Ç|salary|‚ÇΩ|\$|—Ä—É–±–ª|–¥–æ–ª–ª–∞—Ä|–µ–≤—Ä–æ|k\s*‚ÇΩ|k\s*\$/.test(promptLower)
    const hasRequirements = /—Ç—Ä–µ–±–æ–≤–∞–Ω|requirement|–Ω–∞–≤—ã–∫|skill|–∑–Ω–∞–Ω|—É–º–µ–Ω|–æ–ø—ã—Ç|experience/.test(promptLower)
    const hasDescription = /–æ–ø–∏—Å–∞–Ω|description|–∑–∞–¥–∞—á|–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç|—Ñ—É–Ω–∫—Ü|responsibilit/.test(promptLower)
    const hasCompany = /–∫–æ–º–ø–∞–Ω|company|–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü|—Ñ–∏—Ä–º|–∫–æ—Ä–ø–æ—Ä–∞—Ü/.test(promptLower)
    const hasLocation = /–ª–æ–∫–∞—Ü|location|–≥–æ—Ä–æ–¥|–º–æ—Å–∫–≤|—Å–ø–±|–ø–∏—Ç–µ—Ä|–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥|–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫|remote|—É–¥–∞–ª–µ–Ω–Ω/.test(promptLower)
    const hasExperience = /–æ–ø—ã—Ç|experience|—Å—Ç–∞–∂|–ª–µ—Ç|–≥–æ–¥|junior|middle|senior|lead/.test(promptLower)
    const hasBenefits = /–ª—å–≥–æ—Ç|benefit|—Å–æ—Ü–ø–∞–∫–µ—Ç|–æ—Ç–ø—É—Å–∫|–º–µ–¥–∏—Ü–∏–Ω|—Å—Ç—Ä–∞—Ö–æ–≤–∫/.test(promptLower)
    const hasSchedule = /–≥—Ä–∞—Ñ–∏–∫|schedule|—Ä–∞–±–æ—á|–≤—Ä–µ–º—è|—Å–º–µ–Ω|–Ω–æ—á–Ω|–¥–Ω–µ–≤–Ω/.test(promptLower)
    
    let score = 40 // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
    const issues: string[] = []
    const strengths: string[] = []
    const suggestions: string[] = []
    
    // –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã
    if (hasSalary) {
      score += 20
      strengths.push("–£–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–ø–ª–∞—Ç–µ")
    } else {
      score -= 15
      issues.push("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞")
      suggestions.push("–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if (hasRequirements) {
      score += 20
      strengths.push("–ß–µ—Ç–∫–æ –æ–ø–∏—Å–∞–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏")
    } else {
      score -= 15
      issues.push("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —á–µ—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É")
      suggestions.push("–û–ø–∏—à–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
    }
    
    // –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    if (hasDescription) {
      score += 15
      strengths.push("–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
    } else {
      score -= 10
      issues.push("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
      suggestions.push("–†–∞—Å—à–∏—Ä—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –∏ –∑–∞–¥–∞—á")
    }
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏
    if (hasCompany) {
      score += 10
      strengths.push("–£–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏")
    } else {
      score -= 5
      issues.push("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è")
      suggestions.push("–î–æ–±–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞—Ü–∏–∏
    if (hasLocation) {
      score += 8
      strengths.push("–£–∫–∞–∑–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã")
    } else {
      score -= 3
      issues.push("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è")
      suggestions.push("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã (–æ—Ñ–∏—Å/—É–¥–∞–ª–µ–Ω–Ω–æ)")
    }
    
    // –ê–Ω–∞–ª–∏–∑ –æ–ø—ã—Ç–∞
    if (hasExperience) {
      score += 7
      strengths.push("–£–∫–∞–∑–∞–Ω —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç")
    } else {
      score -= 2
      issues.push("–ù–µ —É–∫–∞–∑–∞–Ω —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç")
      suggestions.push("–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ (junior/middle/senior)")
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
    if (hasBenefits) {
      score += 5
      strengths.push("–£–∫–∞–∑–∞–Ω—ã –ª—å–≥–æ—Ç—ã –∏ –±–æ–Ω—É—Å—ã")
    }
    
    if (hasSchedule) {
      score += 3
      strengths.push("–£–∫–∞–∑–∞–Ω –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã")
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    let recommendation: string
    let recommendationReason: string
    
    if (score >= 85) {
      recommendation = "approve"
      recommendationReason = "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–∏"
    } else if (score >= 70) {
      recommendation = "needs_revision"
      recommendationReason = "–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å"
    } else if (score >= 50) {
      recommendation = "needs_revision"
      recommendationReason = "–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
    } else {
      recommendation = "reject"
      recommendationReason = "–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
    const qualityMetrics = {
      contentCompleteness: hasDescription ? Math.min(90, 60 + (prompt.length / 100)) : 30,
      salaryTransparency: hasSalary ? 85 : 15,
      requirementsClarity: hasRequirements ? 80 : 25,
      companyCredibility: hasCompany ? 75 : 40,
      locationClarity: hasLocation ? 80 : 30,
      experienceSpecification: hasExperience ? 85 : 35,
      benefitsDescription: hasBenefits ? 70 : 20,
      overallAttractiveness: Math.min(100, Math.max(20, score))
    }
    
    return JSON.stringify({
      overallScore: Math.min(100, Math.max(0, score)),
      recommendation: recommendation,
      recommendationReason: recommendationReason,
      issues: issues.length > 0 ? issues.map((issue, index) => ({
        type: "content_quality",
        severity: score < 50 ? "high" : score < 70 ? "medium" : "low",
        message: issue,
        suggestion: suggestions[index] || "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
      })) : [{
        type: "system",
        severity: "low",
        message: "–ò–ò —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        suggestion: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
      }],
      strengths: strengths.length > 0 ? strengths : ["–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"],
      qualityMetrics: qualityMetrics,
      aiSummary: `–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –ò–ò. –û—Ü–µ–Ω–∫–∞: ${score}/100. ${recommendationReason}.`,
      fallbackMode: true,
      timestamp: new Date().toISOString()
    })
  }
  
  // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π fallback
  const responses = [
    "–°–∏—Å—Ç–µ–º–∞ –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
    "–ò–ò —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
  ]
  
  return responses[Math.floor(Math.random() * responses.length)]
}

export function tryParseJson(text: string): { ok: boolean; data?: any; raw?: string } {
  const stripCodeFences = (s: string): string => s.replace(/```[a-zA-Z]*\n?[\s\S]*?```/g, (m) => m.replace(/```[a-zA-Z]*\n?/, '').replace(/```$/, ''))
  const removeTrailingCommas = (s: string): string => s.replace(/,\s*([}\]])/g, '$1')
  const extractBalanced = (s: string): string | null => {
    let start = -1
    let depth = 0
    let open: string | null = null
    for (let i = 0; i < s.length; i++) {
      const ch = s[i]
      if (start === -1 && (ch === '{' || ch === '[')) {
        start = i
        open = ch
        depth = 1
        continue
      }
      if (start !== -1) {
        if (ch === '{' || ch === '[') depth++
        else if (ch === '}' || ch === ']') depth--
        if (depth === 0) {
          return s.slice(start, i + 1)
        }
      }
    }
    return null
  }

  const attempts: string[] = []
  attempts.push(text)
  attempts.push(stripCodeFences(text).trim())
  const balanced = extractBalanced(text)
  if (balanced) attempts.push(balanced)
  const balancedFixed = balanced ? removeTrailingCommas(balanced) : ''
  if (balancedFixed) attempts.push(balancedFixed)

  for (const t of attempts) {
    try {
      return { ok: true, data: JSON.parse(t) }
    } catch {}
  }
  // Last resort: try naive fixes (keys in single quotes)
  try {
    let s = stripCodeFences(text)
    s = removeTrailingCommas(s)
    s = s.replace(/([,{\s])'([^'\n\r]+)'\s*:/g, '$1"$2":')
    return { ok: true, data: JSON.parse(s) }
  } catch {}
  return { ok: false, raw: text }
}


